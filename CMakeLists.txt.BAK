cmake_minimum_required(VERSION 3.15)
project(SoundFlowFFmpeg C)

cmake_policy(SET CMP0135 NEW)

find_program(BASH_EXECUTABLE bash)
if(NOT BASH_EXECUTABLE)
    message(FATAL_ERROR "bash executable not found. Please ensure it is in your PATH (e.g., via Git Bash or MSYS2 on Windows).")
endif()

# Define FFmpeg Dependency
include(ExternalProject)

set(FFMPEG_VERSION "8.0")
set(FFMPEG_URL "http://ffmpeg.org/releases/ffmpeg-${FFMPEG_VERSION}.tar.gz")

# Define where FFmpeg will be built and installed
set(FFMPEG_INSTALL_DIR ${CMAKE_BINARY_DIR}/ffmpeg-install)

# Configure Flags
set(FFMPEG_CONFIGURE_FLAGS
        # Build Type
        --disable-shared
        --enable-static
        --enable-pic
        --disable-symver

        # General Disables
        --disable-doc
        --disable-debug
        --disable-avdevice
        --disable-swscale
        --disable-programs
        --enable-ffmpeg
        --enable-ffprobe
        --disable-network
        --disable-muxers
        --disable-demuxers
        --disable-zlib
        --disable-lzma
        --disable-bzlib
        --disable-iconv
        --disable-libxcb
        --disable-bsfs
        --disable-filters
        --disable-parsers
        --disable-indevs
        --disable-outdevs
        --disable-encoders
        --disable-decoders
        --disable-hwaccels
        --disable-nvenc
        --disable-videotoolbox
        --disable-audiotoolbox

        # Enabled Filters
        --disable-filters
        --enable-filter=aformat
        --enable-filter=anull
        --enable-filter=atrim
        --enable-filter=format
        --enable-filter=null
        --enable-filter=setpts
        --enable-filter=trim

        # Enabled Protocols
        --disable-protocols
        --enable-protocol=file
        --enable-protocol=pipe

        # Enabled Demuxers
        --enable-demuxer=image2
        --enable-demuxer=aac
        --enable-demuxer=ac3
        --enable-demuxer=aiff
        --enable-demuxer=ape
        --enable-demuxer=asf
        --enable-demuxer=au
        --enable-demuxer=avi
        --enable-demuxer=flac
        --enable-demuxer=flv
        --enable-demuxer=matroska
        --enable-demuxer=mov
        --enable-demuxer=m4v
        --enable-demuxer=mp3
        --enable-demuxer=mpc
        --enable-demuxer=mpc8
        --enable-demuxer=ogg
        --enable-demuxer=pcm_alaw
        --enable-demuxer=pcm_mulaw
        --enable-demuxer=pcm_f64be
        --enable-demuxer=pcm_f64le
        --enable-demuxer=pcm_f32be
        --enable-demuxer=pcm_f32le
        --enable-demuxer=pcm_s32be
        --enable-demuxer=pcm_s32le
        --enable-demuxer=pcm_s24be
        --enable-demuxer=pcm_s24le
        --enable-demuxer=pcm_s16be
        --enable-demuxer=pcm_s16le
        --enable-demuxer=pcm_s8
        --enable-demuxer=pcm_u32be
        --enable-demuxer=pcm_u32le
        --enable-demuxer=pcm_u24be
        --enable-demuxer=pcm_u24le
        --enable-demuxer=pcm_u16be
        --enable-demuxer=pcm_u16le
        --enable-demuxer=pcm_u8
        --enable-demuxer=rm
        --enable-demuxer=shorten
        --enable-demuxer=tak
        --enable-demuxer=tta
        --enable-demuxer=wav
        --enable-demuxer=wv
        --enable-demuxer=xwma
        --enable-demuxer=dsf

        # Enabled Decoders
        --enable-decoder=aac
        --enable-decoder=aac_latm
        --enable-decoder=ac3
        --enable-decoder=alac
        --enable-decoder=als
        --enable-decoder=ape
        --enable-decoder=atrac1
        --enable-decoder=atrac3
        --enable-decoder=eac3
        --enable-decoder=flac
        --enable-decoder=gsm
        --enable-decoder=gsm_ms
        --enable-decoder=mp1
        --enable-decoder=mp1float
        --enable-decoder=mp2
        --enable-decoder=mp2float
        --enable-decoder=mp3
        --enable-decoder=mp3adu
        --enable-decoder=mp3adufloat
        --enable-decoder=mp3float
        --enable-decoder=mp3on4
        --enable-decoder=mp3on4float
        --enable-decoder=mpc7
        --enable-decoder=mpc8
        --enable-decoder=opus
        --enable-decoder=ra_144
        --enable-decoder=ra_288
        --enable-decoder=ralf
        --enable-decoder=shorten
        --enable-decoder=tak
        --enable-decoder=tta
        --enable-decoder=vorbis
        --enable-decoder=wavpack
        --enable-decoder=wmalossless
        --enable-decoder=wmapro
        --enable-decoder=wmav1
        --enable-decoder=wmav2
        --enable-decoder=wmavoice
        --enable-decoder=pcm_alaw
        --enable-decoder=pcm_bluray
        --enable-decoder=pcm_dvd
        --enable-decoder=pcm_f32be
        --enable-decoder=pcm_f32le
        --enable-decoder=pcm_f64be
        --enable-decoder=pcm_f64le
        --enable-decoder=pcm_lxf
        --enable-decoder=pcm_mulaw
        --enable-decoder=pcm_s8
        --enable-decoder=pcm_s8_planar
        --enable-decoder=pcm_s16be
        --enable-decoder=pcm_s16be_planar
        --enable-decoder=pcm_s16le
        --enable-decoder=pcm_s16le_planar
        --enable-decoder=pcm_s24be
        --enable-decoder=pcm_s24daud
        --enable-decoder=pcm_s24le
        --enable-decoder=pcm_s24le_planar
        --enable-decoder=pcm_s32be
        --enable-decoder=pcm_s32le
        --enable-decoder=pcm_s32le_planar
        --enable-decoder=pcm_u8
        --enable-decoder=pcm_u16be
        --enable-decoder=pcm_u16le
        --enable-decoder=pcm_u24be
        --enable-decoder=pcm_u24le
        --enable-decoder=pcm_u32be
        --enable-decoder=pcm_u32le
        --enable-decoder=dsd_lsbf
        --enable-decoder=dsd_msbf
        --enable-decoder=dsd_lsbf_planar
        --enable-decoder=dsd_msbf_planar

        # Enabled Parsers
        --enable-parser=aac
        --enable-parser=aac_latm
        --enable-parser=ac3
        --enable-parser=cook
        --enable-parser=dca
        --enable-parser=flac
        --enable-parser=gsm
        --enable-parser=mpegaudio
        --enable-parser=tak
        --enable-parser=vorbis

        # Enabled Encoders
        # Lossy and Lossless encoders
        --enable-encoder=aac
        --enable-encoder=ac3
        --enable-encoder=alac
        --enable-encoder=aptx
        --enable-encoder=aptx_hd
        --enable-encoder=eac3
        --enable-encoder=flac
        --enable-encoder=mp2
        --enable-encoder=nellymoser
        --enable-encoder=opus
        --enable-encoder=sbc
        --enable-encoder=sonic
        --enable-encoder=tta
        --enable-encoder=vorbis
        --enable-encoder=wavpack
        --enable-encoder=wmav1
        --enable-encoder=wmav2

        # PCM (Uncompressed) encoders
        --enable-encoder=pcm_alaw
        --enable-encoder=pcm_mulaw
        --enable-encoder=pcm_f32be
        --enable-encoder=pcm_f32le
        --enable-encoder=pcm_f64be
        --enable-encoder=pcm_f64le
        --enable-encoder=pcm_s8
        --enable-encoder=pcm_s8_planar
        --enable-encoder=pcm_s16be
        --enable-encoder=pcm_s16be_planar
        --enable-encoder=pcm_s16le
        --enable-encoder=pcm_s16le_planar
        --enable-encoder=pcm_s24be
        --enable-encoder=pcm_s24daud
        --enable-encoder=pcm_s24le
        --enable-encoder=pcm_s24le_planar
        --enable-encoder=pcm_s32be
        --enable-encoder=pcm_s32le
        --enable-encoder=pcm_s32le_planar
        --enable-encoder=pcm_s64be
        --enable-encoder=pcm_s64le
        --enable-encoder=pcm_u8
        --enable-encoder=pcm_u16be
        --enable-encoder=pcm_u16le
        --enable-encoder=pcm_u24be
        --enable-encoder=pcm_u24le
        --enable-encoder=pcm_u32be
        --enable-encoder=pcm_u32le
)

if(WIN32)
    # MinGW on Windows requires specifying the target OS.
    list(APPEND FFMPEG_CONFIGURE_FLAGS
            --target-os=mingw32
            --arch=x86_64
            "--extra-cflags=-O2 -static -static-libgcc -static-libstdc++"
            "--extra-ldflags=-static"
    )
    # Define system libraries required for linking on Windows
    set(SYSTEM_LIBS bcrypt secur32 ws2_32 iphlpapi)

    # Statically link the C/C++ runtime libraries
    set(STATIC_LINK_OPTIONS "-static")
elseif(UNIX AND NOT APPLE)
    # Linux
    set(SYSTEM_LIBS m pthread)
    set(STATIC_LINK_OPTIONS "")
else()
    # macOS or other Unix
    set(SYSTEM_LIBS)
    set(STATIC_LINK_OPTIONS "")
endif()


ExternalProject_Add(ffmpeg_dependency
        URL                 ${FFMPEG_URL}
        PREFIX              ${CMAKE_BINARY_DIR}/ffmpeg
        INSTALL_DIR         ${FFMPEG_INSTALL_DIR}
        BUILD_IN_SOURCE     1
        CONFIGURE_COMMAND   ${BASH_EXECUTABLE} <SOURCE_DIR>/configure
        --prefix=${FFMPEG_INSTALL_DIR}
        ${FFMPEG_CONFIGURE_FLAGS}

        BUILD_COMMAND       ${CMAKE_MAKE_PROGRAM}
        INSTALL_COMMAND     ${CMAKE_MAKE_PROGRAM} install
        LOG_CONFIGURE       1
        LOG_BUILD           1
        LOG_INSTALL         1
)

# Define Wrapper Library Target

add_library(soundflow_ffmpeg SHARED
        wrapper_src/soundflow_ffmpeg.c
        wrapper_src/soundflow_ffmpeg.h
)

# This library depends on the ffmpeg_dependency target. CMake will ensure FFmpeg is built first.
add_dependencies(soundflow_ffmpeg ffmpeg_dependency)

# Define include and library paths for the wrapper
set(FFMPEG_INCLUDE_DIR ${FFMPEG_INSTALL_DIR}/include)
set(FFMPEG_LIBRARY_DIR ${FFMPEG_INSTALL_DIR}/lib)

# Add the FFmpeg include directory to the wrapper's include path
target_include_directories(soundflow_ffmpeg PRIVATE ${FFMPEG_INCLUDE_DIR})

# Add the FFmpeg library directory to the wrapper's link path
target_link_directories(soundflow_ffmpeg PRIVATE ${FFMPEG_LIBRARY_DIR})

# Link our wrapper against the static FFmpeg libraries and required Windows system libraries.
target_link_libraries(soundflow_ffmpeg PRIVATE
        avformat
        avcodec
        swresample
        avutil
        ${SYSTEM_LIBS}
)

# Apply static linking for the runtime if specified
if(STATIC_LINK_OPTIONS)
    target_link_options(soundflow_ffmpeg PRIVATE ${STATIC_LINK_OPTIONS})
endif()