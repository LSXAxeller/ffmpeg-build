name: Build SoundFlow - FFMpeg Native Library

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows
          - os: windows-latest
            rid: win-x64
            arch: x86_64
            msys2_arch: mingw64
            msys2_toolchain: mingw-w64-x86_64-toolchain

          - os: windows-latest
            rid: win-x86
            arch: x86
            msys2_arch: mingw32
            msys2_toolchain: mingw-w64-i686-toolchain

          - os: ubuntu-22.04
            rid: win-arm64
            arch: aarch64
            cross_compile: true
            cross_prefix: aarch64-w64-mingw32-

          # Linux
          - os: ubuntu-22.04
            rid: linux-x64
            arch: x86_64

          - os: ubuntu-22.04
            rid: linux-arm
            arch: arm
            cross_compile: true
            cross_prefix: arm-linux-gnueabihf-

          - os: ubuntu-22.04
            rid: linux-arm64
            arch: aarch64
            cross_compile: true
            cross_prefix: aarch64-linux-gnu-

          # macOS
          - os: macos-14
            rid: osx-x64
            arch: x86_64

          - os: macos-14
            rid: osx-arm64
            arch: arm64

          # Android
          - os: ubuntu-22.04
            rid: android-arm
            platform: Android
            cmake_arch: armeabi-v7a

          - os: ubuntu-22.04
            rid: android-arm64
            platform: Android
            cmake_arch: arm64-v8a

          - os: ubuntu-22.04
            rid: android-x64
            platform: Android
            cmake_arch: x86_64

          # iOS
          - os: macos-14
            rid: ios-arm64
            platform: iOS
            arch: arm64

    name: Build for ${{ matrix.rid }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup MSYS2 (Windows Only)
        if: runner.os == 'Windows'
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.msys2_arch }}
          update: true
          install: >-
            git
            make
            cmake
            ninja
            bash
            ${{ matrix.msys2_toolchain }}

      - name: Install Cross-compilation Dependencies (Linux)
        if: runner.os == 'Linux' && matrix.cross_compile == true
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-${{ matrix.cross_prefix }} g++-${{ matrix.cross_prefix }}

      - name: Install Linux Build Dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake ninja-build bash

      - name: Setup Android NDK (Android only)
        if: matrix.platform == 'Android'
        uses: android-actions/setup-android@v3

      - name: Configure CMake
        shell: bash
        run: |
          # Set cross-compilation environment variables if needed
          if [ "${{ matrix.cross_compile }}" = "true" ]; then
            export CC=${{ matrix.cross_prefix }}gcc
            export CXX=${{ matrix.cross_prefix }}g++
          fi

          mkdir build && cd build

          if [ "${{ runner.os }}" = "Windows" ]; then
            # We are inside the MSYS2 shell now
            cmake .. -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release
          elif [ "${{ matrix.platform }}" = "iOS" ]; then
            cmake .. -G "Xcode" \
              -DCMAKE_SYSTEM_NAME=iOS \
              -DCMAKE_OSX_ARCHITECTURES=${{ matrix.arch }} \
              -DCMAKE_OSX_DEPLOYMENT_TARGET=12.0
          elif [ "${{ matrix.platform }}" = "Android" ]; then
            cmake .. -G "Ninja" \
              -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_ROOT/build/cmake/android.toolchain.cmake \
              -DANDROID_ABI=${{ matrix.cmake_arch }} \
              -DANDROID_PLATFORM=android-21 \
              -DCMAKE_BUILD_TYPE=Release
          else
            cmake .. -G "Ninja" -DCMAKE_BUILD_TYPE=Release
          fi

      - name: Build
        shell: bash
        run: |
          cd build
          if [ "${{ matrix.platform }}" = "iOS" ]; then
            cmake --build . --config Release --target package_all -j $(sysctl -n hw.ncpu)
          else
            cmake --build . --config Release --target package_all -j $(nproc 2>/dev/null || sysctl -n hw.ncpu)
          fi

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-${{ matrix.rid }}
          path: build/runtimes/${{ matrix.rid }}/native/

  build-freebsd:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - rid: freebsd-x64
            arch: amd64
          - rid: freebsd-arm64
            arch: aarch64

    name: Build for ${{ matrix.rid }}

    steps:
      - uses: actions/checkout@v4

      - name: Build on FreeBSD VM
        uses: vmactions/freebsd-vm@v1
        with:
          release: "14.0" # Use a stable release
          arch: "${{ matrix.arch }}"
          usesh: true
          prepare: |
            pkg install -y cmake gmake ninja bash
          run: |
            set -ex
            cd $GITHUB_WORKSPACE
            mkdir build && cd build
            cmake .. -G "Ninja" -DCMAKE_BUILD_TYPE=Release
            cmake --build . --config Release --target package_all -j$(sysctl -n kern.smp.cpus)

      - name: Upload FreeBSD Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-${{ matrix.rid }}
          path: build/runtimes/${{ matrix.rid }}/native/

  package-all:
    runs-on: ubuntu-latest
    needs: [build, build-freebsd]
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: ffmpeg-*
          merge-multiple: true

      - name: Create final package
        run: |
          mkdir -p package/runtimes
          mv artifacts/* package/runtimes/
          
          # Create zip package
          cd package
          zip -r ../ffmpeg-native.zip .

      - name: Upload final package
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-native-package
          path: ffmpeg-native.zip